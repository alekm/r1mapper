{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Workflow Actions REST API",
    "description" : "# Overview\n   These APIs facilitate workflow actions management. Workflow actions are added as steps during workflow configuration.\n# RateLimit\n   For the Workflow actions REST APIs the following will be true:\n   Limits are applied to each property.\n   A maximum of 60 calls can be made per second.\n   Each second 30 calls will be returned to be used.",
    "license" : {
      "name" : "RUCKUS Cloud Privacy Policy",
      "url" : "https://support.ruckuswireless.com/ruckus-cloud-privacy-policy"
    },
    "version" : "0.0.1"
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Generated server url"
  } ],
  "tags" : [ {
    "name" : "Enrollment Action API",
    "description" : "Manages enrollment actions"
  }, {
    "name" : "Enrollment Action Files API",
    "description" : "Manages enrollment action files"
  }, {
    "name" : "Enrollment Action Type API",
    "description" : "Manages enrollment actions for specific action types"
  } ],
  "paths" : {
    "/enrollmentActions" : {
      "get" : {
        "tags" : [ "Enrollment Action API" ],
        "summary" : "Get All Enrollment Actions Across Action Types",
        "description" : "Gets all enrollment actions across action types.",
        "operationId" : "getAllEnrollmentActions",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Number of records in a page. Will be defaulted to 20 if not specified or found invalid.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 20
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page to retrieve (starts at zero). Will be defaulted to 0 if not specified or found invalid",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 0
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The field names to sort with. Comma seperated from the sort order (asc or desc). Allowed values are name, description, actionType and version.",
          "schema" : {
            "type" : "string"
          },
          "example" : "actionType,name,asc"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageEntityModelActionDto"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageEntityModelActionDto"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Enrollment Action API" ],
        "summary" : "Create Enrollment Action Across Action Types",
        "description" : "Allows user to create various enrollment actions across action types.",
        "operationId" : "createEnrollmentActions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "description" : "Choose appropriate request body from below to configure different  action types",
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ActionDto"
                }, {
                  "$ref" : "#/components/schemas/AupActionDto"
                }, {
                  "$ref" : "#/components/schemas/DataPromptActionDto"
                }, {
                  "$ref" : "#/components/schemas/UserSplitActionDto"
                }, {
                  "$ref" : "#/components/schemas/DisplayMessageActionDto"
                }, {
                  "$ref" : "#/components/schemas/DpskActionDto"
                }, {
                  "$ref" : "#/components/schemas/MacRegistrationActionDto"
                } ]
              }
            },
            "application/vnd.ruckus.v1+json" : {
              "schema" : {
                "description" : "Choose appropriate request body from below to configure different  action types",
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ActionDto"
                }, {
                  "$ref" : "#/components/schemas/AupActionDto"
                }, {
                  "$ref" : "#/components/schemas/DataPromptActionDto"
                }, {
                  "$ref" : "#/components/schemas/UserSplitActionDto"
                }, {
                  "$ref" : "#/components/schemas/DisplayMessageActionDto"
                }, {
                  "$ref" : "#/components/schemas/DpskActionDto"
                }, {
                  "$ref" : "#/components/schemas/MacRegistrationActionDto"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      }
    },
    "/enrollmentActions/query" : {
      "post" : {
        "tags" : [ "Enrollment Action API" ],
        "summary" : "Query Enrollment Actions Across Action Types",
        "description" : "Gets the list of enrollment actions using the specified query.",
        "operationId" : "queryEnrollmentActions",
        "requestBody" : {
          "description" : "Search criteria and pagination details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActionQueryCriteria"
              }
            },
            "application/vnd.ruckus.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActionQueryCriteria"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageEntityModelActionDto"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageEntityModelActionDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid query data supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      }
    },
    "/enrollmentActions/files" : {
      "post" : {
        "tags" : [ "Enrollment Action Files API" ],
        "summary" : "Upload File",
        "description" : "Allows user to upload file.",
        "operationId" : "uploadFile",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "required" : [ "fileDetails", "fileToUpload" ],
                "type" : "object",
                "properties" : {
                  "fileDetails" : {
                    "$ref" : "#/components/schemas/FileUploadDto"
                  },
                  "fileToUpload" : {
                    "type" : "string",
                    "description" : "File to be uploaded",
                    "format" : "binary"
                  }
                }
              }
            },
            "multipart/vnd.ruckus.v1+form-data" : {
              "schema" : {
                "required" : [ "fileDetails", "fileToUpload" ],
                "type" : "object",
                "properties" : {
                  "fileDetails" : {
                    "$ref" : "#/components/schemas/FileUploadDto"
                  },
                  "fileToUpload" : {
                    "type" : "string",
                    "description" : "File to be uploaded",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Uploaded",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileUploadResponseDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileUploadResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/enrollmentActions/{actionId}" : {
      "get" : {
        "tags" : [ "Enrollment Action API" ],
        "summary" : "Get Enrollment Action Configuration for Specific Action Identifier",
        "description" : "Gets enrollment action configuration for the requested action identifier.",
        "operationId" : "getEnrollmentAction",
        "parameters" : [ {
          "name" : "actionId",
          "in" : "path",
          "description" : "Action Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityModelActionDto"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityModelActionDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Enrollment Action API" ],
        "summary" : "Delete Specific Enrollment Actions",
        "description" : "Allows the user to delete enrollment action with the given id.",
        "operationId" : "deleteEnrollmentActions",
        "parameters" : [ {
          "name" : "actionId",
          "in" : "path",
          "description" : "Action Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcceptedResponse"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcceptedResponse"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Enrollment Action API" ],
        "summary" : "Selectively Updates Enrollment Actions",
        "description" : "Allows the user to selectively update enrollment actions.",
        "operationId" : "editEnrollmentActions",
        "parameters" : [ {
          "name" : "actionId",
          "in" : "path",
          "description" : "Action Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "description" : "Fields in enrollment actions to edit",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            },
            "application/vnd.ruckus.v1+json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No Content",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityModelAcceptedResponse"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "headers" : {
              "Location" : {
                "description" : "Updated enrollment action",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityModelAcceptedResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      }
    },
    "/enrollmentActions/files/{fileId}" : {
      "get" : {
        "tags" : [ "Enrollment Action Files API" ],
        "summary" : "Get Signed URL for Download",
        "description" : "Get signed URL for download.",
        "operationId" : "getSignedUrlForDownload",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileResponseDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Enrollment Action Files API" ],
        "summary" : "Delete File",
        "description" : "Delete file.",
        "operationId" : "DeleteFile",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/enrollmentActions/actionTypes/{actionType}" : {
      "get" : {
        "tags" : [ "Enrollment Action Type API" ],
        "summary" : "Get All Enrollment Action Configuration for Specific Action Type",
        "description" : "Gets all enrollment action configurations for a specific action type.",
        "operationId" : "getAllEnrollmentActionByType",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Number of records in a page. Will be defaulted to 20 if not specified or found invalid.",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 20
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page to retrieve (starts at zero). Will be defaulted to 0 if not specified or found invalid",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 0
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The field names to sort with. Comma seperated from the sort order (asc or desc).",
          "schema" : {
            "type" : "string"
          },
          "example" : "name,description,asc"
        }, {
          "name" : "actionType",
          "in" : "path",
          "description" : "Action Type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "AUP", "DATA_PROMPT", "DPSK", "USER_SELECTION_SPLIT", "AUTO_SELECTION_SPLIT", "DISPLAY_MESSAGE", "MAC_REG", "CERT_TEMPLATE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageEntityModelActionDto"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageEntityModelActionDto"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              },
              "application/vnd.ruckus.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ActionDto" : {
        "required" : [ "actionType", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 100,
            "minLength" : 2,
            "type" : "string",
            "description" : "Action name."
          },
          "description" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Action description."
          },
          "actionType" : {
            "type" : "string",
            "description" : "Action type.",
            "enum" : [ "AUP", "DATA_PROMPT", "DPSK", "USER_SELECTION_SPLIT", "AUTO_SELECTION_SPLIT", "DISPLAY_MESSAGE", "MAC_REG", "CERT_TEMPLATE" ]
          },
          "id" : {
            "type" : "string",
            "description" : "Action identifier.",
            "format" : "uuid"
          },
          "parentActionId" : {
            "type" : "string",
            "description" : "Parent action identifier.",
            "format" : "uuid"
          },
          "version" : {
            "type" : "integer",
            "description" : "Version.",
            "format" : "int32"
          },
          "valid" : {
            "type" : "boolean",
            "description" : "Validity flag.",
            "readOnly" : true
          }
        },
        "discriminator" : {
          "propertyName" : "actionType"
        }
      },
      "AupActionDto" : {
        "required" : [ "actionType", "backButtonText", "checkboxHighlightColor", "checkboxText", "continueButtonText", "messageHtml", "name", "title" ],
        "type" : "object",
        "description" : "Request for creating Acceptable User Policy action type : AUP.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActionDto"
        }, {
          "type" : "object",
          "properties" : {
            "title" : {
              "maxLength" : 100,
              "minLength" : 1,
              "type" : "string",
              "description" : "Title displayed during enrollment."
            },
            "messageHtml" : {
              "maxLength" : 1000,
              "minLength" : 1,
              "type" : "string",
              "description" : "Message displayed to user."
            },
            "bottomLabel" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Bottom label displayed to user."
            },
            "checkboxDefaultState" : {
              "type" : "boolean",
              "description" : "Default state of the checkbox displayed to user."
            },
            "checkboxText" : {
              "maxLength" : 100,
              "minLength" : 1,
              "type" : "string",
              "description" : "Text label of the checkbox displayed to user."
            },
            "checkboxHighlightColor" : {
              "pattern" : "^$|^#(?:[0-9a-fA-F]{3}){1,2}$|^(?:[0-9a-fA-F]{3}){1,2}$",
              "type" : "string",
              "description" : "Highlight colour of the checkbox displayed to user."
            },
            "backButtonText" : {
              "maxLength" : 20,
              "minLength" : 1,
              "type" : "string",
              "description" : "Text on the back button displayed to user."
            },
            "continueButtonText" : {
              "maxLength" : 20,
              "minLength" : 1,
              "type" : "string",
              "description" : "Text on the continue button displayed to user."
            },
            "useAupFile" : {
              "type" : "boolean",
              "description" : "Whether to display user policy file."
            },
            "aupFileLocation" : {
              "type" : "string",
              "description" : "User policy file storage location."
            },
            "aupPlainText" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "User display content."
            },
            "aupFileName" : {
              "maxLength" : 100,
              "minLength" : 0,
              "type" : "string",
              "description" : "Aup file name."
            }
          }
        } ]
      },
      "DataPromptActionDto" : {
        "required" : [ "actionType", "name", "variables" ],
        "type" : "object",
        "description" : "Request for creating Data prompt action type : DATA_PROMPT.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActionDto"
        }, {
          "type" : "object",
          "properties" : {
            "title" : {
              "maxLength" : 100,
              "minLength" : 2,
              "type" : "string",
              "description" : "Title displayed during enrollment."
            },
            "messageHtml" : {
              "maxLength" : 1000,
              "minLength" : 1,
              "type" : "string",
              "description" : "Message displayed to user."
            },
            "displayMessageHtml" : {
              "type" : "boolean",
              "description" : "Whether to display message in the form."
            },
            "displayTitle" : {
              "type" : "boolean",
              "description" : "Whether to display title in the form."
            },
            "variables" : {
              "maxItems" : 11,
              "minItems" : 1,
              "type" : "array",
              "description" : "List of fields on the form displayed to user.",
              "items" : {
                "$ref" : "#/components/schemas/Variable"
              }
            }
          }
        } ]
      },
      "DisplayMessageActionDto" : {
        "required" : [ "actionType", "backButtonText", "continueButtonText", "messageHtml", "name", "title" ],
        "type" : "object",
        "description" : "Request for creating Display Message action type : DISPLAY_MESSAGE.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActionDto"
        }, {
          "type" : "object",
          "properties" : {
            "title" : {
              "maxLength" : 100,
              "minLength" : 1,
              "type" : "string",
              "description" : "Title displayed during enrollment."
            },
            "messageHtml" : {
              "maxLength" : 1000,
              "minLength" : 1,
              "type" : "string",
              "description" : "Message displayed to user."
            },
            "bottomLabel" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Bottom label displayed to user."
            },
            "backButtonText" : {
              "maxLength" : 20,
              "minLength" : 1,
              "type" : "string",
              "description" : "Text on the back button displayed to user."
            },
            "continueButtonText" : {
              "maxLength" : 20,
              "minLength" : 1,
              "type" : "string",
              "description" : "Text on the continue button displayed to user."
            },
            "displayBackButton" : {
              "type" : "boolean",
              "description" : "Whether to display back button."
            },
            "displayContinueButton" : {
              "type" : "boolean",
              "description" : "Whether to display continue button."
            },
            "killSession" : {
              "type" : "boolean",
              "description" : "Whether to display terminate session."
            }
          }
        } ]
      },
      "DpskActionDto" : {
        "required" : [ "actionType", "identityGroupId", "name" ],
        "type" : "object",
        "description" : "Request for creating Acceptable User Policy action type : DPSK.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActionDto"
        }, {
          "type" : "object",
          "properties" : {
            "identityGroupId" : {
              "type" : "string",
              "description" : "Identity group identifier.",
              "format" : "uuid"
            },
            "identityId" : {
              "type" : "string",
              "description" : "Identity identifier.",
              "format" : "uuid"
            },
            "emailNotification" : {
              "type" : "boolean",
              "description" : "Email notification required.",
              "readOnly" : true
            },
            "smsNotification" : {
              "type" : "boolean",
              "description" : "Text notification required.",
              "readOnly" : true
            },
            "qrCodeDisplay" : {
              "type" : "boolean",
              "description" : "Quick response code display required."
            },
            "dpskPoolId" : {
              "type" : "string",
              "description" : "Dpsk pool identifier.",
              "readOnly" : true
            }
          }
        } ]
      },
      "MacRegistrationActionDto" : {
        "required" : [ "actionType", "identityGroupId", "name" ],
        "type" : "object",
        "description" : "Request for creating MAC registration action type : MAC_REG.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActionDto"
        }, {
          "type" : "object",
          "properties" : {
            "identityGroupId" : {
              "type" : "string",
              "description" : "Identity group identifier.",
              "format" : "uuid"
            },
            "macRegListId" : {
              "type" : "string",
              "description" : "MAC registration list identifier.",
              "readOnly" : true
            },
            "identityId" : {
              "type" : "string",
              "description" : "Identity identifier.",
              "format" : "uuid"
            }
          }
        } ]
      },
      "UserSplitActionDto" : {
        "required" : [ "actionType", "messageHtml", "name", "title" ],
        "type" : "object",
        "description" : "Request for creating User selection split action type : USER_SELECTION_SPLIT.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ActionDto"
        }, {
          "type" : "object",
          "properties" : {
            "title" : {
              "maxLength" : 100,
              "minLength" : 1,
              "type" : "string",
              "description" : "Title displayed during enrollment."
            },
            "messageHtml" : {
              "maxLength" : 1000,
              "minLength" : 1,
              "type" : "string",
              "description" : "Message displayed to user."
            },
            "shortName" : {
              "maxLength" : 50,
              "minLength" : 0,
              "type" : "string",
              "description" : "This is the short name. If a custom icon is not specified, this name is overlaid on the workflow's icon during the enrollment process."
            },
            "enabled" : {
              "type" : "boolean",
              "description" : "Whether the action is available for use."
            },
            "iconFileLocation" : {
              "maxLength" : 1000,
              "minLength" : 0,
              "type" : "string",
              "description" : "Icon file storage location.If not provided, the short name will not be overlaid."
            }
          }
        } ]
      },
      "Variable" : {
        "required" : [ "label", "type" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "maxLength" : 100,
            "minLength" : 1,
            "type" : "string",
            "description" : "Field label."
          },
          "regex" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "Field input pattern. This should be a valid regular expression."
          },
          "type" : {
            "type" : "string",
            "description" : "File type.",
            "enum" : [ "USER_NAME", "EMAIL", "PHONE", "FIRST_NAME", "LAST_NAME", "INPUT_FIELD_1", "INPUT_FIELD_2", "INPUT_FIELD_3", "INPUT_FIELD_4", "INPUT_FIELD_5", "INPUT_FIELD_6" ]
          },
          "position" : {
            "type" : "integer",
            "description" : "Position in the form",
            "format" : "int32"
          }
        },
        "description" : "Fields to be presented to the user."
      },
      "ErrorResource" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "100 CONTINUE", "101 SWITCHING_PROTOCOLS", "102 PROCESSING", "103 EARLY_HINTS", "103 CHECKPOINT", "200 OK", "201 CREATED", "202 ACCEPTED", "203 NON_AUTHORITATIVE_INFORMATION", "204 NO_CONTENT", "205 RESET_CONTENT", "206 PARTIAL_CONTENT", "207 MULTI_STATUS", "208 ALREADY_REPORTED", "226 IM_USED", "300 MULTIPLE_CHOICES", "301 MOVED_PERMANENTLY", "302 FOUND", "302 MOVED_TEMPORARILY", "303 SEE_OTHER", "304 NOT_MODIFIED", "305 USE_PROXY", "307 TEMPORARY_REDIRECT", "308 PERMANENT_REDIRECT", "400 BAD_REQUEST", "401 UNAUTHORIZED", "402 PAYMENT_REQUIRED", "403 FORBIDDEN", "404 NOT_FOUND", "405 METHOD_NOT_ALLOWED", "406 NOT_ACCEPTABLE", "407 PROXY_AUTHENTICATION_REQUIRED", "408 REQUEST_TIMEOUT", "409 CONFLICT", "410 GONE", "411 LENGTH_REQUIRED", "412 PRECONDITION_FAILED", "413 PAYLOAD_TOO_LARGE", "413 REQUEST_ENTITY_TOO_LARGE", "414 URI_TOO_LONG", "414 REQUEST_URI_TOO_LONG", "415 UNSUPPORTED_MEDIA_TYPE", "416 REQUESTED_RANGE_NOT_SATISFIABLE", "417 EXPECTATION_FAILED", "418 I_AM_A_TEAPOT", "419 INSUFFICIENT_SPACE_ON_RESOURCE", "420 METHOD_FAILURE", "421 DESTINATION_LOCKED", "422 UNPROCESSABLE_ENTITY", "423 LOCKED", "424 FAILED_DEPENDENCY", "425 TOO_EARLY", "426 UPGRADE_REQUIRED", "428 PRECONDITION_REQUIRED", "429 TOO_MANY_REQUESTS", "431 REQUEST_HEADER_FIELDS_TOO_LARGE", "451 UNAVAILABLE_FOR_LEGAL_REASONS", "500 INTERNAL_SERVER_ERROR", "501 NOT_IMPLEMENTED", "502 BAD_GATEWAY", "503 SERVICE_UNAVAILABLE", "504 GATEWAY_TIMEOUT", "505 HTTP_VERSION_NOT_SUPPORTED", "506 VARIANT_ALSO_NEGOTIATES", "507 INSUFFICIENT_STORAGE", "508 LOOP_DETECTED", "509 BANDWIDTH_LIMIT_EXCEEDED", "510 NOT_EXTENDED", "511 NETWORK_AUTHENTICATION_REQUIRED" ]
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time"
          },
          "message" : {
            "type" : "string"
          },
          "requestId" : {
            "type" : "string"
          },
          "detailedMessage" : {
            "type" : "string"
          },
          "validationErrors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AcceptedResponse" : {
        "type" : "object",
        "properties" : {
          "requestId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "ActionQueryCriteria" : {
        "type" : "object",
        "properties" : {
          "sortDirection" : {
            "type" : "string",
            "description" : "Sort direction.",
            "enum" : [ "ASC", "DESC" ]
          },
          "page" : {
            "type" : "integer",
            "description" : "Page number. If not specified the first page will be returned.",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "Number of records in a page.If not specified default page size of 20 will be applied.",
            "format" : "int32"
          },
          "id" : {
            "type" : "string",
            "description" : "Action id.",
            "format" : "uuid"
          },
          "name" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string",
            "description" : "Action name."
          },
          "description" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Action description."
          },
          "actionType" : {
            "type" : "string",
            "description" : "Action type.",
            "enum" : [ "AUP", "DATA_PROMPT", "DPSK", "USER_SELECTION_SPLIT", "AUTO_SELECTION_SPLIT", "DISPLAY_MESSAGE", "MAC_REG", "CERT_TEMPLATE" ]
          },
          "version" : {
            "type" : "string",
            "description" : "Version."
          },
          "parentActionId" : {
            "type" : "string",
            "description" : "Parent action identifier.",
            "format" : "uuid"
          },
          "sortFields" : {
            "type" : "array",
            "description" : "Sort by",
            "items" : {
              "type" : "string",
              "description" : "Sort by",
              "enum" : [ "id", "name", "description", "actionType", "version" ]
            },
            "enum" : [ "id", "name", "description", "actionType", "version" ]
          }
        }
      },
      "EntityModelActionDto" : {
        "required" : [ "actionType", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 100,
            "minLength" : 2,
            "type" : "string",
            "description" : "Action name."
          },
          "description" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string",
            "description" : "Action description."
          },
          "actionType" : {
            "type" : "string",
            "description" : "Action type.",
            "enum" : [ "AUP", "DATA_PROMPT", "DPSK", "USER_SELECTION_SPLIT", "AUTO_SELECTION_SPLIT", "DISPLAY_MESSAGE", "MAC_REG", "CERT_TEMPLATE" ]
          },
          "id" : {
            "type" : "string",
            "description" : "Action identifier.",
            "format" : "uuid"
          },
          "parentActionId" : {
            "type" : "string",
            "description" : "Parent action identifier.",
            "format" : "uuid"
          },
          "version" : {
            "type" : "integer",
            "description" : "Version.",
            "format" : "int32"
          },
          "valid" : {
            "type" : "boolean",
            "description" : "Validity flag.",
            "readOnly" : true
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          }
        }
      },
      "Links" : {
        "type" : "object",
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Link"
        }
      },
      "PageEntityModelActionDto" : {
        "type" : "object",
        "properties" : {
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityModelActionDto"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageableObject" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        }
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          }
        }
      },
      "FileUploadDto" : {
        "required" : [ "name", "type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 100,
            "minLength" : 1,
            "type" : "string",
            "description" : "File name."
          },
          "type" : {
            "type" : "string",
            "description" : "File type.",
            "enum" : [ "AUP_FILE" ]
          }
        },
        "description" : "Input file."
      },
      "FileUploadResponseDto" : {
        "required" : [ "name", "type", "url" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 100,
            "minLength" : 1,
            "type" : "string",
            "description" : "File name."
          },
          "url" : {
            "maxLength" : 1000,
            "minLength" : 1,
            "type" : "string",
            "description" : "File URL."
          },
          "type" : {
            "type" : "string",
            "description" : "File type.",
            "enum" : [ "AUP_FILE" ]
          }
        },
        "description" : "Output file."
      },
      "EntityModelAcceptedResponse" : {
        "type" : "object",
        "properties" : {
          "requestId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "_links" : {
            "$ref" : "#/components/schemas/Links"
          }
        }
      },
      "FileResponseDto" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "File download URL."
          }
        },
        "description" : "Output file."
      },
      "Link" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          },
          "hreflang" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "deprecation" : {
            "type" : "string"
          },
          "profile" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "templated" : {
            "type" : "boolean"
          }
        }
      }
    }
  }
}